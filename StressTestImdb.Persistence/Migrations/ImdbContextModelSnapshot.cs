// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using StressTestImdb.Persistence.Database;

#nullable disable

namespace StressTestImdb.Persistence.Migrations
{
    [DbContext(typeof(ImdbContext))]
    partial class ImdbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("StressTestImdb.Domain.Entities.NameBasics", b =>
                {
                    b.Property<string>("Nconst")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("nconst");

                    b.Property<int>("BirthYear")
                        .HasColumnType("int")
                        .HasColumnName("birthYear");

                    b.Property<int>("DeathYear")
                        .HasColumnType("int")
                        .HasColumnName("deathYear");

                    b.Property<string>("KnownForTitles")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("knownForTitles");

                    b.Property<string>("PrimaryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("primaryName");

                    b.Property<string>("PrimaryProfession")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("primaryProfession");

                    b.HasKey("Nconst");

                    b.ToTable("namebasics", "imdb");
                });

            modelBuilder.Entity("StressTestImdb.Domain.Entities.TitleAkas", b =>
                {
                    b.Property<string>("TitleId")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("titleId");

                    b.Property<string>("Attributes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("attributes");

                    b.Property<bool>("IsOriginalTitle")
                        .HasColumnType("bit")
                        .HasColumnName("isOriginalTitle");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("language");

                    b.Property<int>("Ordering")
                        .HasColumnType("int")
                        .HasColumnName("ordering");

                    b.Property<string>("Region")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("region");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("title");

                    b.Property<string>("Types")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("types");

                    b.HasKey("TitleId");

                    b.ToTable("titleakas", "imdb");
                });

            modelBuilder.Entity("StressTestImdb.Domain.Entities.TitleBasics", b =>
                {
                    b.Property<string>("Tconst")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("tconst");

                    b.Property<int>("EndYear")
                        .HasColumnType("int")
                        .HasColumnName("endYear");

                    b.Property<string>("Genres")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("genres");

                    b.Property<bool>("IsAdult")
                        .HasColumnType("bit")
                        .HasColumnName("isAdult");

                    b.Property<string>("OriginalTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("originalTitle");

                    b.Property<string>("PrimaryTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("primaryTitle");

                    b.Property<int>("RuntimeMinutes")
                        .HasColumnType("int")
                        .HasColumnName("runtimeMinutes");

                    b.Property<int>("StartYear")
                        .HasColumnType("int")
                        .HasColumnName("startYear");

                    b.Property<string>("TitleType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("titleType");

                    b.HasKey("Tconst");

                    b.ToTable("titlebasics", "imdb");
                });

            modelBuilder.Entity("StressTestImdb.Domain.Entities.TitleCrew", b =>
                {
                    b.Property<string>("Tconst")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("tconst");

                    b.Property<string>("Directors")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("directors");

                    b.Property<string>("Writers")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("writers");

                    b.HasKey("Tconst");

                    b.ToTable("titlecrew", "imdb");
                });

            modelBuilder.Entity("StressTestImdb.Domain.Entities.TitleEpisode", b =>
                {
                    b.Property<string>("Tconst")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("tconst");

                    b.Property<int>("EpisodeNumber")
                        .HasColumnType("int")
                        .HasColumnName("episodeNumber");

                    b.Property<string>("ParentTconst")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("parentTconst");

                    b.Property<int>("SeasonNumber")
                        .HasColumnType("int")
                        .HasColumnName("seasonNumber");

                    b.HasKey("Tconst");

                    b.HasIndex("ParentTconst");

                    b.ToTable("titleepisode", "imdb");
                });

            modelBuilder.Entity("StressTestImdb.Domain.Entities.TitlePrincipals", b =>
                {
                    b.Property<string>("Tconst")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("tconst");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("category");

                    b.Property<string>("Characters")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("characters");

                    b.Property<string>("Job")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("job");

                    b.Property<string>("Nconst")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("nconst");

                    b.Property<int>("Ordering")
                        .HasColumnType("int")
                        .HasColumnName("ordering");

                    b.HasKey("Tconst");

                    b.ToTable("titleprincipals", "imdb");
                });

            modelBuilder.Entity("StressTestImdb.Domain.Entities.TitleRating", b =>
                {
                    b.Property<string>("Tconst")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("tconst");

                    b.Property<double>("AverageRating")
                        .HasColumnType("float")
                        .HasColumnName("averageRating");

                    b.Property<int>("NumVotes")
                        .HasColumnType("int")
                        .HasColumnName("numVotes");

                    b.HasKey("Tconst");

                    b.ToTable("titleratings", "imdb");
                });

            modelBuilder.Entity("StressTestImdb.Domain.Entities.TitleAkas", b =>
                {
                    b.HasOne("StressTestImdb.Domain.Entities.TitleBasics", "TitleBasics")
                        .WithMany()
                        .HasForeignKey("TitleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StressTestImdb.Domain.Entities.TitleCrew", "TitleCrew")
                        .WithMany()
                        .HasForeignKey("TitleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TitleBasics");

                    b.Navigation("TitleCrew");
                });

            modelBuilder.Entity("StressTestImdb.Domain.Entities.TitleEpisode", b =>
                {
                    b.HasOne("StressTestImdb.Domain.Entities.TitleAkas", "TitleAkas")
                        .WithMany("TitleEpisodes")
                        .HasForeignKey("ParentTconst")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TitleAkas");
                });

            modelBuilder.Entity("StressTestImdb.Domain.Entities.TitlePrincipals", b =>
                {
                    b.HasOne("StressTestImdb.Domain.Entities.TitleAkas", "TitleAkas")
                        .WithMany("TitlePrincipals")
                        .HasForeignKey("Tconst")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TitleAkas");
                });

            modelBuilder.Entity("StressTestImdb.Domain.Entities.TitleRating", b =>
                {
                    b.HasOne("StressTestImdb.Domain.Entities.TitleAkas", "TitleAkas")
                        .WithOne("TitleRating")
                        .HasForeignKey("StressTestImdb.Domain.Entities.TitleRating", "Tconst")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TitleAkas");
                });

            modelBuilder.Entity("StressTestImdb.Domain.Entities.TitleAkas", b =>
                {
                    b.Navigation("TitleEpisodes");

                    b.Navigation("TitlePrincipals");

                    b.Navigation("TitleRating")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
